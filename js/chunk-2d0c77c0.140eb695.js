(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c77c0"],{"518f":function(s,t){function e(){var s=function(){var s=this,t=s.$createElement;s._self._c;return s._m(0)},t=[function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("div",{staticClass:"frontmatter-markdown"},[e("h4",[s._v("前言")]),s._v(" "),e("h4",[s._v("关键节点")]),s._v(" "),e("p",[s._v("robot中"),e("strong",[s._v("prerunmodifier")]),s._v("的加入减少重复引入，让代码框架更轻量清晰，resource一次加载。")]),s._v(" "),e("h4",[s._v("历史问题")]),s._v(" "),e("p",[s._v("为了模块化地设计，复杂的项目会定义分类出颗粒度不同的前置条件或者全局变量，以供不同的用例运行前作为suite setup来调用。而robotframework项目在执行每一个robot文件时，都是从setting开始，引入resource文件，执行suite setup，再然后执行testcase等。那么有两种情况会重复执行setup，如果setup中定义一下公共变量耗时比较长时，那么重复执行setup将大大加长了全量用例的执行时间。（注：robot文件的suit setup中执行定义的变量只作用于本robot用例范围）")]),s._v(" "),e("ol",[e("li",[s._v("自动化测试用例写成多个robot文件。testcases分开文件了，这个你无法避免，因为你总不能一个robot文件，写上上千条用例吧，那么对于公共变量，每多加一个robot，这个robot在运行时，就需要调用setup。那么第二次被执行，那就是冗余的。")]),s._v(" "),e("li",[s._v("resource文件颗粒度较大导致每个robot都调用，也是直接冗余+冗余了。")])]),s._v(" "),e("p",[e("br"),s._v("如下是一个测试用例robot的文件: 这个文件引入了两个自定义模块的resource。其中初始化.robot中定义的keyword（初始化应用识别环境）被作为测试套件的初始化操作并最先执行。")]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-robot"}},[s._v("# case.robot\n*** Settings ***\nResource    初始化.robot\nResource        防火墙初始化.robot\nSuite Setup     初始化应用识别环境\n\n*** Variables ***\n${参数1}      test文件.json\n${参数2}    cat /proc/net/nf_conntrack; conntrack -D; \n\n*** Test Cases ***\n用例1\n    [Tags]      标签\n \t...\n \n用例2\n    [Tags]      标签\n    ...\n")])]),s._v(" "),e("p",[s._v("其中初始化.robot文件中定义有keyword（初始化应用识别环境）")]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-robot"}},[s._v("# 初始化.robot\n*** Variable ***\n${自动化脚本目录}       /data/\n\n*** Keywords ***\n初始化应用识别环境\n    ...这里有很多，耗时比较长\n")])]),s._v(" "),e("p",[s._v("那么在项目进行下去的时候，如case.robot的用例文件多了起来之后，这个keyword会被一遍一遍地执行。耗时就慢慢变得很长很长。")]),s._v(" "),e("br"),s._v(" "),e("h4",[s._v("优化的核心逻辑")]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# SuiteVisitor.py  需要在项目的根目录下创建")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""\n                    \n参考材料：https://robot-framework.readthedocs.io/en/latest/_modules/robot/model/visitor.html  #  prerunmodifier 标准文件\n         https://robot-framework.readthedocs.io/en/latest/autodoc/robot.running.html      # TestSuiteBuilder 基于现有测试用例文件和目录创建可执行测试套件\n"""')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" robot.api "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" TestSuiteBuilder\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" os\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\ninit_robot_path = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'配置初始化.robot'")]),s._v("    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 创建一个robot，这里为最公共的，希望在项目运行中只被初始化一次就够了的逻辑。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 重写套件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-class"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("SuiteVisitor")]),s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Abstract class to ease traversing through the suite structure.\n                    \n    See the :mod:`module level <robot.model.visitor>` documentation for more\n    information and an example.\n    """')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("visit_suite")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("self, suite")]),s._v("):")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Implements traversing through suites.\n                    \n        Can be overridden to allow modifying the passed in ``suite`` without\n        calling :meth:`start_suite` or :meth:`end_suite` nor visiting child\n        suites, tests or setup and teardown at all.\n        ljy: --prerunmodifier 调用的方法。\n        """')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" self.start_suite(suite) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("is")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("False")]),s._v(":\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(":\n                suite.setup.visit(self)\n                suite.suites.visit(self)\n                suite.tests.visit(self)\n                suite.teardown.visit(self)\n                self.end_suite(suite)\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" Exception "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" e:\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("pass")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("start_suite")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("self, suite")]),s._v("):")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Called when a suite starts. Default implementation does nothing.\n                    \n        Can return explicit ``False`` to stop visiting.\n        ljy: 套件开始执行的时候，将目标robot文件处理成可执行套件，并加载到原套件的最前端。\n        """')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# # print(dir(suite))")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# print(suite.suites)")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# print(dir(suite.suites))")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# # print(suite._setter__suites)")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# # print(suite.filter)")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# # print(suite.configure)")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# # print(suite.parent)")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v('# print("edit_suite")')]),s._v("\n        su = TestSuiteBuilder().build(init_robot_path)\n        suite.suites.insert("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", su)\n        print(suite.suites)\n")])]),s._v(" "),e("pre",[e("code",{pre:!0,attrs:{class:"hljs language-robot"}},[s._v("# 配置初始化.robot\n\n*** Settings ***\nResource            common.robot\n\n\n*** Variables ***\n\n...定义了很多全局变量\n\n\n*** Keywords ***\n...定义了很多全局关键字\n\n")])]),s._v(" "),e("br"),s._v(" "),e("p",[s._v("试试吧，看下你的项目是不是可以去掉很多冗余的import")])])}];return{render:s,staticRenderFns:t}}const r=e();s.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(s){return this.templateRender?this.templateRender():s("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}}}]);
//# sourceMappingURL=chunk-2d0c77c0.140eb695.js.map