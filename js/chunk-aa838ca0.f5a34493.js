(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-aa838ca0"],{"67fb":function(s,t,a){function r(){var s=function(){var s=this,t=s.$createElement;s._self._c;return s._m(0)},t=[function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("div",{staticClass:"frontmatter-markdown"},[r("nav",{staticClass:"table-of-contents"},[r("ol",[r("li",[r("a",{attrs:{href:"#关键性逻辑支撑"}},[s._v(" 关键性逻辑支撑")])]),r("li",[r("a",{attrs:{href:"#设计逻辑"}},[s._v(" 设计逻辑")])]),r("li",[r("a",{attrs:{href:"#核心代码"}},[s._v(" 核心代码")]),r("ol",[r("li",[r("a",{attrs:{href:"#业务逻辑"}},[s._v(" 业务逻辑")])])])]),r("li",[r("a",{attrs:{href:"#其他扩展"}},[s._v(" 其他扩展")])])])]),r("p",[s._v("本文主要交代下我对单API测试数据中心的一些设计想法。")]),s._v(" "),r("h3",{attrs:{id:"关键性逻辑支撑",tabindex:"-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键性逻辑支撑",target:"_blank"}},[s._v("§")]),s._v(" 关键性逻辑支撑")]),s._v(" "),r("ol",[r("li",[r("p",[s._v("对同类型的功能性入参的限制应该是要保持一致的")]),s._v(" "),r("p",[s._v("作者认为在一个成熟的产品中，对于同类型同功能意义的字段应该是要高度一致的，譬如网关产品的ip、网关等，输入限制也应该是一致的；")]),s._v(" "),r("ol",[r("li",[s._v("譬如接口中定义网络地址时就应该定义为ip、host、srcip等有效的有限的字段，"),r("strong",[s._v("字段名别搞得花里胡哨")]),s._v("。")]),s._v(" "),r("li",[s._v("譬如网关、ip等"),r("strong",[s._v("同类字段的输入限制就应该是一致的")]),s._v("，如ipv4，-1.-1.-1.-1。")]),s._v(" "),r("li",[s._v("其他的譬如端口或姓名等就"),r("strong",[s._v("应该有同一的产品线的标准，任何接口定义该类字段都应遵守")]),s._v("。")])]),s._v(" "),r("p",[s._v("故在产品线内是完全可以以属（或者类）的概念设计接口中高度同属的字段的测试数据的。从而自动生成用例case。")])]),s._v(" "),r("li",[r("p",[s._v("对于限制重复的参数采用动态随机值的形式以保证可用")]),s._v(" "),r("p",[s._v("对于如新增用户的接口中的唯一值限制，采用代码扩展生成动态随机值的形式来保证可用")])]),s._v(" "),r("li",[r("p",[s._v("json schema的反向扩展应用")]),s._v(" "),r("p",[s._v("面向存在接口schema的字段，人工反向输出一个正则表达式，利用正则表达式构造反例数据，而直接使用schema来生成正例测试数据。")])]),s._v(" "),r("li",[r("p",[s._v("单接口测试中对响应体的判断应该剥离业务")]),s._v(" "),r("p",[s._v("对于单接口的自动化测试，应着重关注其结构的完整性，而非业务功能。建议只关注响应体的完整性，面向状态码、响应体标准码、标准信息、字段集合进行检验。")])])]),s._v(" "),r("br"),s._v(" "),r("h3",{attrs:{id:"设计逻辑",tabindex:"-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计逻辑",target:"_blank"}},[s._v("§")]),s._v(" 设计逻辑")]),s._v(" "),r("ol",[r("li",[r("p",[s._v("标签化类别\n如下图，创建一个标签，收集字段。")])]),s._v(" "),r("li",[r("p",[s._v("给类别定义测试数据")]),s._v(" "),r("img",{staticStyle:{zoom:"30%"},attrs:{src:a("c0be")}})]),s._v(" "),r("li",[r("p",[s._v("添加通用型正反例")])])]),s._v(" "),r("h3",{attrs:{id:"核心代码",tabindex:"-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心代码",target:"_blank"}},[s._v("§")]),s._v(" 核心代码")]),s._v(" "),r("p",[s._v('以POST请求体为例：{"ip": "9.9.9.11", "mask":"255.255.255.0", "gateway":"9.9.9.254"}，原始API存在示例合法数据。')]),s._v(" "),r("p",[s._v("ip属于ipv4；属于非字符。如存在如下数据：")]),s._v(" "),r("img",{staticStyle:{zoom:"38%"},attrs:{src:a("b7ca")}}),s._v(" "),r("h4",{attrs:{id:"业务逻辑",tabindex:"-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务逻辑",target:"_blank"}},[s._v("§")]),s._v(" 业务逻辑")]),s._v(" "),r("ol",[r("li",[s._v("根据字段查询到所属标签，进而查询到固定数据、正则表达式、扩展代码的字符串")])]),s._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-sql"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("select")]),s._v(" case_data,re_expression,python_extend,case_type "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" api_pulic_data "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("where")]),s._v(" tag_id "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" ("),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("select")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("id")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" tags "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("where")]),s._v(" mark = "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ip"')]),s._v(")\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 此处在设计上，ip字段可能同时属于不同标签。")]),s._v("\nsqlQuery = [{"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"case_data"')]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2.2.2.2"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"re_expression"')]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"正则1"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"python_extend"')]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"v4IP()"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"case_type"')]),s._v(":"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"1"')]),s._v("}...]\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 加工下生成如下的整合数据。")]),s._v("\npositiveCases= {"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"case_data"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2.2.2.2"')]),s._v(",...], "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"re_expression"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"正则1"')]),s._v(",...], "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"python_extend"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"python_extend_data=v4IP()"')]),s._v(",...]}\nnegativeCases = {"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"case_data"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"2.2.2.-1"')]),s._v(","),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"字符串1"')]),s._v(",...], "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"re_expression"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"正则2"')]),s._v(",...], "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"python_extend"')]),s._v(":["),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"globals()['python_extend_data']=v4IP(flag=0)\"")]),s._v(","),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"globals()['python_extend_data']=randomStr(10)\"")]),s._v(",...]}\n")])]),s._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[s._v("将正则数据和代码扩展整合")]),s._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-python"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 正则：")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("get_re_data")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("re_ex="),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'^(.*)$'")])]),s._v("):")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""\n     引用第三库，根据正则表达式生成数据\n    :param re_ex: 正则表达式； 默认 全量字符表达式\n    :return: 数据\n    """')]),s._v("\n    _x = Xeger()\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" _x.xeger(re_ex)\n\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 扩展代码")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("get_python_extend_data")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("code_str, arg_string="),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'python_extend_data'")])]),s._v("):")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""\n    执行python代码, 代码内会产生一个全局变量。 执行完代码后，返回该全局变量\n    :param code_str: string; python代码块\n    :param arg_string:  python代码块中全局变量的变量名; 默认为 python_extend_data;\n    :return:  返回从全局变量中的python_extend_data字段。\n    """')]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(":\n        "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 扩展代码村存放在extend_code.py")]),s._v("\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" extend_code "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" *\n        exec(code_str)\n        "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("globals")]),s._v("().get(arg_string, "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f'扩展的python代码块内未定义全局变量: "),r("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{arg_string}")]),s._v("'")]),s._v(")\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" Exception "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" e:\n        print(e)\n\n"),r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("main")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("rules_dict, arg_string="),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'python_extend_data'")])]),s._v("):")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""\n    执行python代码, 代码内会产生一个全局变量。 执行完代码后，返回该全局变量\n    :param rules_dict: 正例(positiveCases)或者反例(negativeCases)\n    :param arg_string:  python代码块中全局变量的变量名; 默认为 python_extend_data;\n    :return:  返回所有的正例数据或者反例数据\n    """')]),s._v("\n "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 固定数据，直接取即可")]),s._v("\n    case_data = "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("list")]),s._v("(rules_dict.get("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'case_data'")]),s._v(", []))\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 正则表达式数据，利用第三方库自动生成")]),s._v("\n    re_data = ("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("list")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("map")]),s._v("(get_re_data, rules_dict.get("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'re_expression'")]),s._v(", []))))\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# python扩展代码块数据，exec代码块后，以arg_string变量来引用，加入到列表。")]),s._v("\n    python_extend_fun = rules_dict.get("),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'python_extend'")]),s._v(", [])\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" python_extend_fun:\n        python_extend_data = ("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("list")]),s._v("("),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("map")]),s._v("(get_python_extend_data, python_extend_fun, [arg_string] * "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("len")]),s._v("(python_extend_fun))))\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(":\n        python_extend_data = []\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 数据合并")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" case_data + re_data + python_extend_data \n        \n")])])]),s._v(" "),r("li",[r("p",[s._v("加入共性用例数据")]),s._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-python"}},[s._v("POSITIVE_CASES = []  "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 产品线的公共正例")]),s._v("\nNEGATIVE_CASES = ["),r("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("None")]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v("] "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# 产品线的公共反例例")]),s._v("\npositiveCases += POSITIVE_CASES\nnegativeCases += NEGATIVE_CASES\n\n")])])]),s._v(" "),r("li",[r("p",[s._v("在示例数据内进行保持唯一变量构造请求体发送后断言")]),s._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"hljs language-python"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" positiveCases "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("200")]),s._v(" == request.status_code "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" ...：\n\tresult.append("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("elif")]),s._v(" negativeCases "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("200")]),s._v(" != request.status_code "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"失败"')]),s._v(":\n    result.append("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(":\n    print(request, response)\n    result.append("),r("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(")\n\t\n")])])])]),s._v(" "),r("p",[s._v("剩下的就是考虑如何设计用例数据和维护一个比较庞大的数据中心了。")]),s._v(" "),r("br"),s._v(" "),r("h3",{attrs:{id:"其他扩展",tabindex:"-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他扩展",target:"_blank"}},[s._v("§")]),s._v(" 其他扩展")]),s._v(" "),r("p",[s._v("除了如上的内容验证以外，其他的接口测试角度大概的基础逻辑如下（需要API各个字段的类型和属性）：")]),s._v(" "),r("ol",[r("li",[s._v("必填项校验\n"),r("ol",[r("li",[s._v("单一缺失：将参考参数中的必填性参数逐一删掉，然后进行调用，断言接口响应信息")]),s._v(" "),r("li",[s._v("多缺失：将参考参数中的必填性参数，两两缺失，然后进行调用，断言接口响应信息")]),s._v(" "),r("li",[s._v("全缺失：将参考参数中的必填性参数全部删掉，然后进行调用，断言接口响应信息")])])]),s._v(" "),r("li",[s._v("空值验证\n"),r("ol",[r("li",[s._v("必填性参数值为空：将参考参数中的必填性参数的值置空，然后进行调用，断言接口响应信息")]),s._v(" "),r("li",[s._v("参数值部分为空：将参考参数中的非必填参数的值置空，然后进行调用，断言接口响应信息请求体为空")]),s._v(" "),r("li",[s._v("Json：请求体为空JSON")])])]),s._v(" "),r("li",[s._v("参数类型验证\n"),r("ol",[r("li",[s._v("string >>int：将参考参数中的int类型的参数值改成string型，然后进行调用，断言接口响应信息")]),s._v(" "),r("li",[s._v("int >>string：将参考参数中的string类型的参数值改成int型，然后进行调用，断言接口响应信息")]),s._v(" "),r("li",[s._v("bool>>0,1: 如有布尔型的参数，将值改为0/1,然后进行调用，断言接口响应信息")])])]),s._v(" "),r("li",[s._v("内容增强验证（本项需要较多的代码逻辑）\n"),r("ol",[r("li",[s._v("参数名包含id/no（一般是订单号或者车牌号等）：依托参考参数值，生成同长度的字符串，然后进行调用，断言接口响应信息。如orderNO：2020103000001 >> orderNo:abcdefghijklmn")]),s._v(" "),r("li",[s._v("参数名包含type/flag/code/status(一般是标识性参数)：依托参考参数值，填入0/1，ture/false，然后进行调用，断言接口响应信息。")]),s._v(" "),r("li",[s._v("参数名包含dict/list（一般是详情类参数）：依托参考参数值，将参数转成元组等类型，然后进行调用，断言接口响应信息.")]),s._v(" "),r("li",[s._v('参数名包含date（一般是日期）：依托参考参数值，改变日期格式：YY-mm-dd、yyyy-MM-dd"T"HH:mm:ss.SSSXXX。然后进行调用，断言接口响应信息。')]),s._v(" "),r("li",[s._v("参数名包含time（一般是时间):依托参考参数值，改变时间戳格式：10位时间戳，13位时间戳。然后进行调用，断言接口响应信息。")])])]),s._v(" "),r("li",[s._v("长度验证\n"),r("ol",[r("li",[s._v("如int类型，最长长度是32位，那么对int类型的参数，传入33位长度的数值，然后进行调用，断言接口响应信息。")])])]),s._v(" "),r("li",[s._v("Content-Type验证\n"),r("ol",[r("li",[s._v("如参考headers：将application/x-www-form-urlencoded>>application/json 互转；")]),s._v(" "),r("li",[s._v("如 multipart/form-data >> application/octet-stream 互转。然后进行调用，断言接口响应信息。")])])])]),s._v(" "),r("p",[s._v("共勉！")])])}];return{render:s,staticRenderFns:t}}const e=r();s.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(s){return this.templateRender?this.templateRender():s("div","Rendering")},created:function(){this.templateRender=e.render,this.$options.staticRenderFns=e.staticRenderFns}}}}},b7ca:function(s,t,a){s.exports=a.p+"img/api-tags-data2.2c6ac60f.png"},c0be:function(s,t,a){s.exports=a.p+"img/api-tags-data.f784188c.png"}}]);
//# sourceMappingURL=chunk-aa838ca0.f5a34493.js.map