(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2af84ef8"],{"2ae3":function(t,e,r){function a(){var t=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},e=[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"frontmatter-markdown"},[a("nav",{staticClass:"table-of-contents"},[a("ol",[a("li",[a("a",{attrs:{href:"#背景和意义"}},[t._v(" 背景和意义")])]),a("li",[a("a",{attrs:{href:"#核心观点及其理解"}},[t._v(" 核心观点及其理解")])]),a("li",[a("a",{attrs:{href:"#测试性需求"}},[t._v(" 测试性需求")]),a("ol",[a("li",[a("a",{attrs:{href:"#测试性需求标准理解"}},[t._v(" 测试性需求标准理解")])]),a("li",[a("a",{attrs:{href:"#实操"}},[t._v(" 实操")])])])])])]),a("p",[t._v("本文探索软件可测试性分析（Testability）。也包括SANGFOR公司内的当前的一些标准。主要是软件方向哈。")]),t._v(" "),a("p",[t._v("在软件研发的过程中，Design for testing 慢慢地成为软件组织核心研发能力的标尺的一部分。这里也介绍下其他的可以关注的Design方向。Design for deployment、 Design for monitor、Design for scale、Design for failure。")]),t._v(" "),a("h3",{attrs:{id:"背景和意义",tabindex:"-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景和意义",target:"_blank"}},[t._v("§")]),t._v(" 背景和意义")]),t._v(" "),a("p",[a("strong",[t._v("Testability：")]),t._v(" 计算机程序能够被测试的容易程度。")]),t._v(" "),a("p",[t._v("系统不可测试或测试成本过高，都应该是研发过程中不可接受的。可测试性的分析，就是为了提前规避这个问题，不要累积技术债务。其他的就不在这里过于关注。")]),t._v(" "),a("h3",{attrs:{id:"核心观点及其理解",tabindex:"-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心观点及其理解",target:"_blank"}},[t._v("§")]),t._v(" 核心观点及其理解")]),t._v(" "),a("ol",[a("li",[t._v("可测试性是设计出来的")]),t._v(" "),a("li",[t._v("提升可测试性是可以节省研发成本的")]),t._v(" "),a("li",[t._v("关注可测试性是可以提升软件质量的")])]),t._v(" "),a("h3",{attrs:{id:"测试性需求",tabindex:"-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试性需求",target:"_blank"}},[t._v("§")]),t._v(" 测试性需求")]),t._v(" "),a("h4",{attrs:{id:"测试性需求标准理解",tabindex:"-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试性需求标准理解",target:"_blank"}},[t._v("§")]),t._v(" 测试性需求标准理解")]),t._v(" "),a("img",{staticStyle:{zoom:"33%"},attrs:{src:r("514d")}}),t._v(" "),a("h4",{attrs:{id:"实操",tabindex:"-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实操",target:"_blank"}},[t._v("§")]),t._v(" 实操")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("通过"),a("strong",[t._v("挖掘")]),t._v("正反例场景中对期望结果的验证手段来输出测试性需求")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("有如下这样一个性能场景：\n32C设备在100%业务流下（4.5K EPS），elink流式处理日志不会堆积\n期望结果是："),a("strong",[t._v("不堆积")])]),t._v(" "),a("p",[t._v("怎么判断是否堆积？就好比喻一个边进水，边出水的池子，怎么样才使池子不堆积溢出呢？")]),t._v(" "),a("p",[t._v("第一，在稳定的情况下，如果进水速率小于等于出水速率，那就不会堆积；")]),t._v(" "),a("p",[t._v("第二，如果进水口足够大，那就不会池外堆积；")]),t._v(" "),a("p",[t._v("第三，进水口足够了，也要看池子够大，如此，也就不会池外堆积。")]),t._v(" "),a("p",[t._v("这里引出一个容量、存量、生产量和消费速率的概念。")]),t._v(" "),a("p",[a("strong",[t._v("存量越来越大，那就意味池内堆积")]),t._v("；")]),t._v(" "),a("p",[a("strong",[t._v("消费速率+容量小于生产量，那就导致池外堆积；")])]),t._v(" "),a("p",[t._v("如上，可以提出观察组件容量、存量、生产量和消费速率的测试性需求")]),t._v(" "),a("p",[t._v("或，代码工具提供监控结果，True为未堆积。但其统计逻辑需要合理。")]),t._v(" "),a("hr")])])]),t._v(" "),a("li",[a("p",[t._v("通过"),a("strong",[t._v("识别场景参与者或系统参与者的角色及职责")]),t._v("，以其角度观察用户场景来输出测试性需求")]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("服务部署的难易程度；")])]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("服务资源占用的可观测性；")])]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("内部模拟异常的难易程度；")])]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("外部模拟异常的难易程度；")])]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("内建自测测试（BIST）;")])]),t._v(" "),a("hr")]),t._v(" "),a("li",[a("p",[t._v("从白盒逻辑中输出测试性需求\n该项不做展开")])])]),t._v(" "),a("hr")])}];return{render:t,staticRenderFns:e}}const _=a();t.exports={attributes:{},vue:{component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=_.render,this.$options.staticRenderFns=_.staticRenderFns}}}}},"514d":function(t,e,r){t.exports=r.p+"img/testability-ZTA.bb41a3c6.png"}}]);
//# sourceMappingURL=chunk-2af84ef8.cab1a44a.js.map